use anyhow::Context;
use cynic::QueryBuilder;

use linear_api::schema::{
    issue_get::{IssueGet, IssueGetVariables},
    issue_list::Issue,
};

use crate::{
    cmd::{CliCommand, CommonArgs, Format},
    render::Render,
};

/// Checkout or create the GIT branch for an issue.
///
/// Will use the branch name generated by Linear.
/// Requires the current directory to be inside a Git repository.
// TODO: check if a PR is already open for the issue, and use the existing branch.
#[derive(clap::Parser)]
pub struct CmdIssueView {
    #[clap(flatten)]
    common: CommonArgs,

    #[clap(long, short, default_value = "table")]
    pub format: Format,

    /// Issue ID (eg: MYTEAM-123)
    pub issue_id: String,
}

impl CliCommand for CmdIssueView {
    type Output = ();

    async fn run(self) -> Result<(), anyhow::Error> {
        // Load the issue to determine the branch name.
        let vars = IssueGetVariables {
            id: self.issue_id.clone(),
        };
        let op = IssueGet::build(vars);

        let issue = self
            .common
            .client()?
            .run(op)
            .await?
            .data
            .with_context(|| format!("issue {} not found", self.issue_id))?
            .issue;

        let fields = Issue::default_detail_fields();
        let out = Issue::render_detail_table(&issue, &fields);
        println!("{}", out);

        Ok(())
    }
}
